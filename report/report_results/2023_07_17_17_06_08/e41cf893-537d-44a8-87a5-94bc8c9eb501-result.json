{"name": "test1_loginUserExisted", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.UnknownMethodException: Message: Method has not yet been implemented\nStacktrace:\nNotYetImplementedError: Method has not yet been implemented\n    at XCUITestDriver.executeCommand (/Users/57block/.appium/node_modules/@appium/base-driver/lib/basedriver/driver.ts:101:13)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at XCUITestDriver.executeCommand (/Users/57block/.appium/node_modules/appium-xcuitest-driver/lib/driver.js:1082:12)\n    at defaultBehavior (/usr/local/Cellar/appium/2.0.0/libexec/lib/node_modules/appium/lib/appium.js:684:14)\n    at AppiumDriver.executeWrappedCommand (/usr/local/Cellar/appium/2.0.0/libexec/lib/node_modules/appium/lib/appium.js:774:16)\n    at AppiumDriver.executeCommand (/usr/local/Cellar/appium/2.0.0/libexec/lib/node_modules/appium/lib/appium.js:696:17)\n    at asyncHandler (/usr/local/Cellar/appium/2.0.0/libexec/lib/node_modules/appium/node_modules/@appium/base-driver/lib/protocol/protocol.js:393:19)", "trace": "self = <appium.webdriver.webdriver.WebDriver (session=\"91d13211-6a1b-468a-b473-515686467f9e\")>\npackage_name = 'live.57blocks.fanatics.FanaticsLive-Development'\ndata_type = 'cpuinfo', data_read_timeout = 'memoryinfo'\n\n    def get_performance_data(\n        self, package_name: str, data_type: str, data_read_timeout: Union[int, None] = None\n    ) -> List[List[str]]:\n        \"\"\"Returns the information of the system state\n        which is supported to read as like cpu, memory, network traffic, and battery.\n    \n        Android only.\n    \n        Args:\n            package_name: The package name of the application\n            data_type: The type of system state which wants to read.\n                It should be one of the supported performance data types.\n                Check :func:`.get_performance_data_types` for supported types\n            data_read_timeout: The number of attempts to read\n    \n        Usage:\n            self.driver.get_performance_data('my.app.package', 'cpuinfo', 5)\n    \n        Returns:\n            The data along to `data_type`\n        \"\"\"\n        ext_name = 'mobile: getPerformanceData'\n        args: Dict[str, Union[str, int]] = {'packageName': package_name, 'dataType': data_type}\n        try:\n>           return self.assert_extension_exists(ext_name).execute_script(ext_name, args)\n\nvenv/lib/python3.9/site-packages/appium/webdriver/extensions/android/performance.py:50: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:406: in execute_script\n    return self.execute(command, {\"script\": script, \"args\": converted_args})[\"value\"]\nvenv/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:346: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <appium.webdriver.errorhandler.MobileErrorHandler object at 0x110617df0>\nresponse = {'status': 405, 'value': '{\"value\":{\"error\":\"unknown method\",\"message\":\"Method is not implemented\",\"stacktrace\":\"NotIm...lar/appium/2.0.0/libexec/lib/node_modules/appium/node_modules/@appium/base-driver/lib/protocol/protocol.js:393:19)\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        https://www.w3.org/TR/webdriver/#errors\n        \"\"\"\n        payload = response.get('value', '')\n        try:\n            payload_dict = json.loads(payload)\n        except (json.JSONDecodeError, TypeError):\n            return\n        if not isinstance(payload_dict, dict):\n            return\n        value = payload_dict.get('value')\n        if not isinstance(value, dict):\n            return\n        error = value.get('error')\n        if not error:\n            return\n    \n        message = value.get('message', error)\n        stacktrace = value.get('stacktrace', '')\n        # In theory, we should also be checking HTTP status codes.\n        # Java client, for example, prints a warning if the actual `error`\n        # value does not match to the response's HTTP status code.\n        exception_class: Type[sel_exceptions.WebDriverException] = ERROR_TO_EXC_MAPPING.get(\n            error, sel_exceptions.WebDriverException\n        )\n        if exception_class is sel_exceptions.WebDriverException and message:\n            if message == 'No such context found.':\n                exception_class = appium_exceptions.NoSuchContextException\n            elif message == 'That command could not be executed in the current context.':\n                exception_class = appium_exceptions.InvalidSwitchToTargetException\n    \n        if exception_class is sel_exceptions.UnexpectedAlertPresentException:\n            raise sel_exceptions.UnexpectedAlertPresentException(\n                msg=message,\n                stacktrace=format_stacktrace(stacktrace),\n                alert_text=value.get('data'),\n            )\n>       raise exception_class(msg=message, stacktrace=format_stacktrace(stacktrace))\nE       selenium.common.exceptions.UnknownMethodException: Message: Method is not implemented\nE       Stacktrace:\nE       NotImplementedError: Method is not implemented\nE           at XCUITestDriver.execute (/Users/57block/.appium/node_modules/appium-xcuitest-driver/lib/commands/execute.js:124:13)\nE           at commandExecutor (/Users/57block/.appium/node_modules/@appium/base-driver/lib/basedriver/driver.ts:107:18)\nE           at /Users/57block/.appium/node_modules/async-lock/lib/index.js:171:12\nE           at AsyncLock._promiseTry (/Users/57block/.appium/node_modules/async-lock/lib/index.js:304:31)\nE           at exec (/Users/57block/.appium/node_modules/async-lock/lib/index.js:170:9)\nE           at AsyncLock.acquire (/Users/57block/.appium/node_modules/async-lock/lib/index.js:187:3)\nE           at XCUITestDriver.executeCommand (/Users/57block/.appium/node_modules/@appium/base-driver/lib/basedriver/driver.ts:123:39)\nE           at processTicksAndRejections (node:internal/process/task_queues:95:5)\nE           at XCUITestDriver.executeCommand (/Users/57block/.appium/node_modules/appium-xcuitest-driver/lib/driver.js:1082:12)\nE           at defaultBehavior (/usr/local/Cellar/appium/2.0.0/libexec/lib/node_modules/appium/lib/appium.js:684:14)\nE           at AppiumDriver.executeWrappedCommand (/usr/local/Cellar/appium/2.0.0/libexec/lib/node_modules/appium/lib/appium.js:774:16)\nE           at AppiumDriver.executeCommand (/usr/local/Cellar/appium/2.0.0/libexec/lib/node_modules/appium/lib/appium.js:696:17)\nE           at asyncHandler (/usr/local/Cellar/appium/2.0.0/libexec/lib/node_modules/appium/node_modules/@appium/base-driver/lib/protocol/protocol.js:393:19)\n\nvenv/lib/python3.9/site-packages/appium/webdriver/errorhandler.py:122: UnknownMethodException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <testcase.login_logout.test_login_logout.TestLoginLogout testMethod=test1_loginUserExisted>\n\n    @allure.story(\"Login\")\n    def test1_loginUserExisted(self) -> None:\n        with allure.step('test'):\n>           data = self.driver.get_performance_data(app_name, \"cpuinfo\", \"memoryinfo\")\n\ntestcase/login_logout/test_login_logout.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv/lib/python3.9/site-packages/appium/webdriver/extensions/android/performance.py:55: in get_performance_data\n    return self.mark_extension_absence(ext_name).execute(Command.GET_PERFORMANCE_DATA, args)['value']\nvenv/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:346: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <appium.webdriver.errorhandler.MobileErrorHandler object at 0x110617df0>\nresponse = {'status': 405, 'value': '{\"value\":{\"error\":\"unknown method\",\"message\":\"Method has not yet been implemented\",\"stacktra...lar/appium/2.0.0/libexec/lib/node_modules/appium/node_modules/@appium/base-driver/lib/protocol/protocol.js:393:19)\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        https://www.w3.org/TR/webdriver/#errors\n        \"\"\"\n        payload = response.get('value', '')\n        try:\n            payload_dict = json.loads(payload)\n        except (json.JSONDecodeError, TypeError):\n            return\n        if not isinstance(payload_dict, dict):\n            return\n        value = payload_dict.get('value')\n        if not isinstance(value, dict):\n            return\n        error = value.get('error')\n        if not error:\n            return\n    \n        message = value.get('message', error)\n        stacktrace = value.get('stacktrace', '')\n        # In theory, we should also be checking HTTP status codes.\n        # Java client, for example, prints a warning if the actual `error`\n        # value does not match to the response's HTTP status code.\n        exception_class: Type[sel_exceptions.WebDriverException] = ERROR_TO_EXC_MAPPING.get(\n            error, sel_exceptions.WebDriverException\n        )\n        if exception_class is sel_exceptions.WebDriverException and message:\n            if message == 'No such context found.':\n                exception_class = appium_exceptions.NoSuchContextException\n            elif message == 'That command could not be executed in the current context.':\n                exception_class = appium_exceptions.InvalidSwitchToTargetException\n    \n        if exception_class is sel_exceptions.UnexpectedAlertPresentException:\n            raise sel_exceptions.UnexpectedAlertPresentException(\n                msg=message,\n                stacktrace=format_stacktrace(stacktrace),\n                alert_text=value.get('data'),\n            )\n>       raise exception_class(msg=message, stacktrace=format_stacktrace(stacktrace))\nE       selenium.common.exceptions.UnknownMethodException: Message: Method has not yet been implemented\nE       Stacktrace:\nE       NotYetImplementedError: Method has not yet been implemented\nE           at XCUITestDriver.executeCommand (/Users/57block/.appium/node_modules/@appium/base-driver/lib/basedriver/driver.ts:101:13)\nE           at processTicksAndRejections (node:internal/process/task_queues:95:5)\nE           at XCUITestDriver.executeCommand (/Users/57block/.appium/node_modules/appium-xcuitest-driver/lib/driver.js:1082:12)\nE           at defaultBehavior (/usr/local/Cellar/appium/2.0.0/libexec/lib/node_modules/appium/lib/appium.js:684:14)\nE           at AppiumDriver.executeWrappedCommand (/usr/local/Cellar/appium/2.0.0/libexec/lib/node_modules/appium/lib/appium.js:774:16)\nE           at AppiumDriver.executeCommand (/usr/local/Cellar/appium/2.0.0/libexec/lib/node_modules/appium/lib/appium.js:696:17)\nE           at asyncHandler (/usr/local/Cellar/appium/2.0.0/libexec/lib/node_modules/appium/node_modules/@appium/base-driver/lib/protocol/protocol.js:393:19)\n\nvenv/lib/python3.9/site-packages/appium/webdriver/errorhandler.py:122: UnknownMethodException"}, "steps": [{"name": "test", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.UnknownMethodException: Message: Method has not yet been implemented\nStacktrace:\nNotYetImplementedError: Method has not yet been implemented\n    at XCUITestDriver.executeCommand (/Users/57block/.appium/node_modules/@appium/base-driver/lib/basedriver/driver.ts:101:13)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at XCUITestDriver.executeCommand (/Users/57block/.appium/node_modules/appium-xcuitest-driver/lib/driver.js:1082:12)\n    at defaultBehavior (/usr/local/Cellar/appium/2.0.0/libexec/lib/node_modules/appium/lib/appium.js:684:14)\n    at AppiumDriver.executeWrappedCommand (/usr/local/Cellar/appium/2.0.0/libexec/lib/node_modules/appium/lib/appium.js:774:16)\n    at AppiumDriver.executeCommand (/usr/local/Cellar/appium/2.0.0/libexec/lib/node_modules/appium/lib/appium.js:696:17)\n    at asyncHandler (/usr/local/Cellar/appium/2.0.0/libexec/lib/node_modules/appium/node_modules/@appium/base-driver/lib/protocol/protocol.js:393:19)\n", "trace": "  File \"/Users/57block/projects/auto/testcase/login_logout/test_login_logout.py\", line 22, in test1_loginUserExisted\n    data = self.driver.get_performance_data(app_name, \"cpuinfo\", \"memoryinfo\")\n  File \"/Users/57block/projects/auto/venv/lib/python3.9/site-packages/appium/webdriver/extensions/android/performance.py\", line 55, in get_performance_data\n    return self.mark_extension_absence(ext_name).execute(Command.GET_PERFORMANCE_DATA, args)['value']\n  File \"/Users/57block/projects/auto/venv/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py\", line 346, in execute\n    self.error_handler.check_response(response)\n  File \"/Users/57block/projects/auto/venv/lib/python3.9/site-packages/appium/webdriver/errorhandler.py\", line 122, in check_response\n    raise exception_class(msg=message, stacktrace=format_stacktrace(stacktrace))\n"}, "start": 1689584774960, "stop": 1689584774984}], "start": 1689584773587, "stop": 1689584774993, "uuid": "5ad8533b-d7ac-4ce8-a2f4-78081c476af3", "historyId": "d75c4dcda674153883fc6288ff86a74e", "testCaseId": "d75c4dcda674153883fc6288ff86a74e", "fullName": "testcase.login_logout.test_login_logout.TestLoginLogout#test1_loginUserExisted", "labels": [{"name": "story", "value": "Login"}, {"name": "feature", "value": "Login && Log out"}, {"name": "parentSuite", "value": "testcase.login_logout"}, {"name": "suite", "value": "test_login_logout"}, {"name": "subSuite", "value": "TestLoginLogout"}, {"name": "host", "value": "Joys-MacBook-Pro.local"}, {"name": "thread", "value": "13201-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.login_logout.test_login_logout"}]}